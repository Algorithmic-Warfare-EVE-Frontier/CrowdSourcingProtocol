// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { Vote } from "./../common.sol";

struct VotesTableData {
  bytes32 requestId;
  uint32 timestamp;
  address contributer;
  Vote vote;
  string note;
}

library VotesTable {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "app", name: "VotesTable", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74626170700000000000000000000000566f7465735461626c65000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0039040120041401000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (bytes32, uint32, address, uint8, string)
  Schema constant _valueSchema = Schema.wrap(0x003904015f036100c50000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "voteId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](5);
    fieldNames[0] = "requestId";
    fieldNames[1] = "timestamp";
    fieldNames[2] = "contributer";
    fieldNames[3] = "vote";
    fieldNames[4] = "note";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get requestId.
   */
  function getRequestId(bytes32 voteId) internal view returns (bytes32 requestId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Get requestId.
   */
  function _getRequestId(bytes32 voteId) internal view returns (bytes32 requestId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Set requestId.
   */
  function setRequestId(bytes32 voteId, bytes32 requestId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((requestId)), _fieldLayout);
  }

  /**
   * @notice Set requestId.
   */
  function _setRequestId(bytes32 voteId, bytes32 requestId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((requestId)), _fieldLayout);
  }

  /**
   * @notice Get timestamp.
   */
  function getTimestamp(bytes32 voteId) internal view returns (uint32 timestamp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get timestamp.
   */
  function _getTimestamp(bytes32 voteId) internal view returns (uint32 timestamp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set timestamp.
   */
  function setTimestamp(bytes32 voteId, uint32 timestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((timestamp)), _fieldLayout);
  }

  /**
   * @notice Set timestamp.
   */
  function _setTimestamp(bytes32 voteId, uint32 timestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((timestamp)), _fieldLayout);
  }

  /**
   * @notice Get contributer.
   */
  function getContributer(bytes32 voteId) internal view returns (address contributer) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get contributer.
   */
  function _getContributer(bytes32 voteId) internal view returns (address contributer) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set contributer.
   */
  function setContributer(bytes32 voteId, address contributer) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((contributer)), _fieldLayout);
  }

  /**
   * @notice Set contributer.
   */
  function _setContributer(bytes32 voteId, address contributer) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((contributer)), _fieldLayout);
  }

  /**
   * @notice Get vote.
   */
  function getVote(bytes32 voteId) internal view returns (Vote vote) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return Vote(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get vote.
   */
  function _getVote(bytes32 voteId) internal view returns (Vote vote) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return Vote(uint8(bytes1(_blob)));
  }

  /**
   * @notice Set vote.
   */
  function setVote(bytes32 voteId, Vote vote) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked(uint8(vote)), _fieldLayout);
  }

  /**
   * @notice Set vote.
   */
  function _setVote(bytes32 voteId, Vote vote) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked(uint8(vote)), _fieldLayout);
  }

  /**
   * @notice Get note.
   */
  function getNote(bytes32 voteId) internal view returns (string memory note) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /**
   * @notice Get note.
   */
  function _getNote(bytes32 voteId) internal view returns (string memory note) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /**
   * @notice Set note.
   */
  function setNote(bytes32 voteId, string memory note) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, bytes((note)));
  }

  /**
   * @notice Set note.
   */
  function _setNote(bytes32 voteId, string memory note) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, bytes((note)));
  }

  /**
   * @notice Get the length of note.
   */
  function lengthNote(bytes32 voteId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of note.
   */
  function _lengthNote(bytes32 voteId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of note.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemNote(bytes32 voteId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Get an item of note.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemNote(bytes32 voteId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Push a slice to note.
   */
  function pushNote(bytes32 voteId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Push a slice to note.
   */
  function _pushNote(bytes32 voteId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Pop a slice from note.
   */
  function popNote(bytes32 voteId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Pop a slice from note.
   */
  function _popNote(bytes32 voteId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Update a slice of note at `_index`.
   */
  function updateNote(bytes32 voteId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of note at `_index`.
   */
  function _updateNote(bytes32 voteId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 voteId) internal view returns (VotesTableData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 voteId) internal view returns (VotesTableData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 voteId,
    bytes32 requestId,
    uint32 timestamp,
    address contributer,
    Vote vote,
    string memory note
  ) internal {
    bytes memory _staticData = encodeStatic(requestId, timestamp, contributer, vote);

    EncodedLengths _encodedLengths = encodeLengths(note);
    bytes memory _dynamicData = encodeDynamic(note);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 voteId,
    bytes32 requestId,
    uint32 timestamp,
    address contributer,
    Vote vote,
    string memory note
  ) internal {
    bytes memory _staticData = encodeStatic(requestId, timestamp, contributer, vote);

    EncodedLengths _encodedLengths = encodeLengths(note);
    bytes memory _dynamicData = encodeDynamic(note);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 voteId, VotesTableData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.requestId, _table.timestamp, _table.contributer, _table.vote);

    EncodedLengths _encodedLengths = encodeLengths(_table.note);
    bytes memory _dynamicData = encodeDynamic(_table.note);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 voteId, VotesTableData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.requestId, _table.timestamp, _table.contributer, _table.vote);

    EncodedLengths _encodedLengths = encodeLengths(_table.note);
    bytes memory _dynamicData = encodeDynamic(_table.note);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (bytes32 requestId, uint32 timestamp, address contributer, Vote vote) {
    requestId = (Bytes.getBytes32(_blob, 0));

    timestamp = (uint32(Bytes.getBytes4(_blob, 32)));

    contributer = (address(Bytes.getBytes20(_blob, 36)));

    vote = Vote(uint8(Bytes.getBytes1(_blob, 56)));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  ) internal pure returns (string memory note) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    note = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (VotesTableData memory _table) {
    (_table.requestId, _table.timestamp, _table.contributer, _table.vote) = decodeStatic(_staticData);

    (_table.note) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 voteId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 voteId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    bytes32 requestId,
    uint32 timestamp,
    address contributer,
    Vote vote
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(requestId, timestamp, contributer, vote);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(string memory note) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(bytes(note).length);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(string memory note) internal pure returns (bytes memory) {
    return abi.encodePacked(bytes((note)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    bytes32 requestId,
    uint32 timestamp,
    address contributer,
    Vote vote,
    string memory note
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(requestId, timestamp, contributer, vote);

    EncodedLengths _encodedLengths = encodeLengths(note);
    bytes memory _dynamicData = encodeDynamic(note);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 voteId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voteId;

    return _keyTuple;
  }
}
