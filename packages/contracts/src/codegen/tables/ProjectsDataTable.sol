// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { ProjectStatus } from "./../common.sol";

// Hex below is the result of `WorldResourceIdLib.encode({ namespace: "app", name: "ProjectsDataTabl", typeId: RESOURCE_TABLE });`
ResourceId constant _tableId = ResourceId.wrap(0x7462617070000000000000000000000050726f6a65637473446174615461626c);
ResourceId constant ProjectsDataTableTableId = _tableId;

FieldLayout constant _fieldLayout = FieldLayout.wrap(
  0x0025030220040100000000000000000000000000000000000000000000000000
);

struct ProjectsDataTableData {
  uint256 balance;
  uint32 rejections;
  ProjectStatus projectStatus;
  string description;
  string title;
}

library ProjectsDataTable {
  /**
   * @notice Get the table values' field layout.
   * @return _fieldLayout The field layout for the table.
   */
  function getFieldLayout() internal pure returns (FieldLayout) {
    return _fieldLayout;
  }

  /**
   * @notice Get the table's key schema.
   * @return _keySchema The key schema for the table.
   */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _keySchema = new SchemaType[](1);
    _keySchema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_keySchema);
  }

  /**
   * @notice Get the table's value schema.
   * @return _valueSchema The value schema for the table.
   */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _valueSchema = new SchemaType[](5);
    _valueSchema[0] = SchemaType.UINT256;
    _valueSchema[1] = SchemaType.UINT32;
    _valueSchema[2] = SchemaType.UINT8;
    _valueSchema[3] = SchemaType.STRING;
    _valueSchema[4] = SchemaType.STRING;

    return SchemaLib.encode(_valueSchema);
  }

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "projectId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](5);
    fieldNames[0] = "balance";
    fieldNames[1] = "rejections";
    fieldNames[2] = "projectStatus";
    fieldNames[3] = "description";
    fieldNames[4] = "title";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get balance.
   */
  function getBalance(bytes32 projectId) internal view returns (uint256 balance) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get balance.
   */
  function _getBalance(bytes32 projectId) internal view returns (uint256 balance) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set balance.
   */
  function setBalance(bytes32 projectId, uint256 balance) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((balance)), _fieldLayout);
  }

  /**
   * @notice Set balance.
   */
  function _setBalance(bytes32 projectId, uint256 balance) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((balance)), _fieldLayout);
  }

  /**
   * @notice Get rejections.
   */
  function getRejections(bytes32 projectId) internal view returns (uint32 rejections) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get rejections.
   */
  function _getRejections(bytes32 projectId) internal view returns (uint32 rejections) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set rejections.
   */
  function setRejections(bytes32 projectId, uint32 rejections) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((rejections)), _fieldLayout);
  }

  /**
   * @notice Set rejections.
   */
  function _setRejections(bytes32 projectId, uint32 rejections) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((rejections)), _fieldLayout);
  }

  /**
   * @notice Get projectStatus.
   */
  function getProjectStatus(bytes32 projectId) internal view returns (ProjectStatus projectStatus) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return ProjectStatus(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get projectStatus.
   */
  function _getProjectStatus(bytes32 projectId) internal view returns (ProjectStatus projectStatus) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return ProjectStatus(uint8(bytes1(_blob)));
  }

  /**
   * @notice Set projectStatus.
   */
  function setProjectStatus(bytes32 projectId, ProjectStatus projectStatus) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked(uint8(projectStatus)), _fieldLayout);
  }

  /**
   * @notice Set projectStatus.
   */
  function _setProjectStatus(bytes32 projectId, ProjectStatus projectStatus) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked(uint8(projectStatus)), _fieldLayout);
  }

  /**
   * @notice Get description.
   */
  function getDescription(bytes32 projectId) internal view returns (string memory description) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /**
   * @notice Get description.
   */
  function _getDescription(bytes32 projectId) internal view returns (string memory description) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /**
   * @notice Set description.
   */
  function setDescription(bytes32 projectId, string memory description) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, bytes((description)));
  }

  /**
   * @notice Set description.
   */
  function _setDescription(bytes32 projectId, string memory description) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, bytes((description)));
  }

  /**
   * @notice Get the length of description.
   */
  function lengthDescription(bytes32 projectId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of description.
   */
  function _lengthDescription(bytes32 projectId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of description.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemDescription(bytes32 projectId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Get an item of description.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemDescription(bytes32 projectId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Push a slice to description.
   */
  function pushDescription(bytes32 projectId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Push a slice to description.
   */
  function _pushDescription(bytes32 projectId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Pop a slice from description.
   */
  function popDescription(bytes32 projectId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Pop a slice from description.
   */
  function _popDescription(bytes32 projectId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Update a slice of description at `_index`.
   */
  function updateDescription(bytes32 projectId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of description at `_index`.
   */
  function _updateDescription(bytes32 projectId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get title.
   */
  function getTitle(bytes32 projectId) internal view returns (string memory title) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 1);
    return (string(_blob));
  }

  /**
   * @notice Get title.
   */
  function _getTitle(bytes32 projectId) internal view returns (string memory title) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 1);
    return (string(_blob));
  }

  /**
   * @notice Set title.
   */
  function setTitle(bytes32 projectId, string memory title) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 1, bytes((title)));
  }

  /**
   * @notice Set title.
   */
  function _setTitle(bytes32 projectId, string memory title) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreCore.setDynamicField(_tableId, _keyTuple, 1, bytes((title)));
  }

  /**
   * @notice Get the length of title.
   */
  function lengthTitle(bytes32 projectId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of title.
   */
  function _lengthTitle(bytes32 projectId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of title.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemTitle(bytes32 projectId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Get an item of title.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemTitle(bytes32 projectId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Push a slice to title.
   */
  function pushTitle(bytes32 projectId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 1, bytes((_slice)));
  }

  /**
   * @notice Push a slice to title.
   */
  function _pushTitle(bytes32 projectId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 1, bytes((_slice)));
  }

  /**
   * @notice Pop a slice from title.
   */
  function popTitle(bytes32 projectId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 1, 1);
  }

  /**
   * @notice Pop a slice from title.
   */
  function _popTitle(bytes32 projectId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 1, 1);
  }

  /**
   * @notice Update a slice of title at `_index`.
   */
  function updateTitle(bytes32 projectId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of title at `_index`.
   */
  function _updateTitle(bytes32 projectId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 projectId) internal view returns (ProjectsDataTableData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 projectId) internal view returns (ProjectsDataTableData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 projectId,
    uint256 balance,
    uint32 rejections,
    ProjectStatus projectStatus,
    string memory description,
    string memory title
  ) internal {
    bytes memory _staticData = encodeStatic(balance, rejections, projectStatus);

    PackedCounter _encodedLengths = encodeLengths(description, title);
    bytes memory _dynamicData = encodeDynamic(description, title);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 projectId,
    uint256 balance,
    uint32 rejections,
    ProjectStatus projectStatus,
    string memory description,
    string memory title
  ) internal {
    bytes memory _staticData = encodeStatic(balance, rejections, projectStatus);

    PackedCounter _encodedLengths = encodeLengths(description, title);
    bytes memory _dynamicData = encodeDynamic(description, title);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 projectId, ProjectsDataTableData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.balance, _table.rejections, _table.projectStatus);

    PackedCounter _encodedLengths = encodeLengths(_table.description, _table.title);
    bytes memory _dynamicData = encodeDynamic(_table.description, _table.title);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 projectId, ProjectsDataTableData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.balance, _table.rejections, _table.projectStatus);

    PackedCounter _encodedLengths = encodeLengths(_table.description, _table.title);
    bytes memory _dynamicData = encodeDynamic(_table.description, _table.title);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (uint256 balance, uint32 rejections, ProjectStatus projectStatus) {
    balance = (uint256(Bytes.slice32(_blob, 0)));

    rejections = (uint32(Bytes.slice4(_blob, 32)));

    projectStatus = ProjectStatus(uint8(Bytes.slice1(_blob, 36)));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    PackedCounter _encodedLengths,
    bytes memory _blob
  ) internal pure returns (string memory description, string memory title) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    description = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(1);
    }
    title = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    PackedCounter _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (ProjectsDataTableData memory _table) {
    (_table.balance, _table.rejections, _table.projectStatus) = decodeStatic(_staticData);

    (_table.description, _table.title) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 projectId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 projectId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 balance,
    uint32 rejections,
    ProjectStatus projectStatus
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(balance, rejections, projectStatus);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(
    string memory description,
    string memory title
  ) internal pure returns (PackedCounter _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = PackedCounterLib.pack(bytes(description).length, bytes(title).length);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(string memory description, string memory title) internal pure returns (bytes memory) {
    return abi.encodePacked(bytes((description)), bytes((title)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 balance,
    uint32 rejections,
    ProjectStatus projectStatus,
    string memory description,
    string memory title
  ) internal pure returns (bytes memory, PackedCounter, bytes memory) {
    bytes memory _staticData = encodeStatic(balance, rejections, projectStatus);

    PackedCounter _encodedLengths = encodeLengths(description, title);
    bytes memory _dynamicData = encodeDynamic(description, title);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 projectId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    return _keyTuple;
  }
}
