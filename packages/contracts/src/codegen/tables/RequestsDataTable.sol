// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { RequestStatus, ApprovalStatus } from "./../common.sol";

struct RequestsDataTableData {
  uint32 approvalRate;
  uint32 denialRate;
  RequestStatus requestStatus;
  ApprovalStatus approvalStatus;
  string description;
}

library RequestsDataTable {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "app", name: "RequestsDataTabl", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746261707000000000000000000000005265717565737473446174615461626c);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x000a040104040101000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint32, uint32, uint8, uint8, string)
  Schema constant _valueSchema = Schema.wrap(0x000a040103030000c50000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "requestId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](5);
    fieldNames[0] = "approvalRate";
    fieldNames[1] = "denialRate";
    fieldNames[2] = "requestStatus";
    fieldNames[3] = "approvalStatus";
    fieldNames[4] = "description";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get approvalRate.
   */
  function getApprovalRate(bytes32 requestId) internal view returns (uint32 approvalRate) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get approvalRate.
   */
  function _getApprovalRate(bytes32 requestId) internal view returns (uint32 approvalRate) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set approvalRate.
   */
  function setApprovalRate(bytes32 requestId, uint32 approvalRate) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((approvalRate)), _fieldLayout);
  }

  /**
   * @notice Set approvalRate.
   */
  function _setApprovalRate(bytes32 requestId, uint32 approvalRate) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((approvalRate)), _fieldLayout);
  }

  /**
   * @notice Get denialRate.
   */
  function getDenialRate(bytes32 requestId) internal view returns (uint32 denialRate) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get denialRate.
   */
  function _getDenialRate(bytes32 requestId) internal view returns (uint32 denialRate) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set denialRate.
   */
  function setDenialRate(bytes32 requestId, uint32 denialRate) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((denialRate)), _fieldLayout);
  }

  /**
   * @notice Set denialRate.
   */
  function _setDenialRate(bytes32 requestId, uint32 denialRate) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((denialRate)), _fieldLayout);
  }

  /**
   * @notice Get requestStatus.
   */
  function getRequestStatus(bytes32 requestId) internal view returns (RequestStatus requestStatus) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return RequestStatus(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get requestStatus.
   */
  function _getRequestStatus(bytes32 requestId) internal view returns (RequestStatus requestStatus) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return RequestStatus(uint8(bytes1(_blob)));
  }

  /**
   * @notice Set requestStatus.
   */
  function setRequestStatus(bytes32 requestId, RequestStatus requestStatus) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked(uint8(requestStatus)), _fieldLayout);
  }

  /**
   * @notice Set requestStatus.
   */
  function _setRequestStatus(bytes32 requestId, RequestStatus requestStatus) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked(uint8(requestStatus)), _fieldLayout);
  }

  /**
   * @notice Get approvalStatus.
   */
  function getApprovalStatus(bytes32 requestId) internal view returns (ApprovalStatus approvalStatus) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return ApprovalStatus(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get approvalStatus.
   */
  function _getApprovalStatus(bytes32 requestId) internal view returns (ApprovalStatus approvalStatus) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return ApprovalStatus(uint8(bytes1(_blob)));
  }

  /**
   * @notice Set approvalStatus.
   */
  function setApprovalStatus(bytes32 requestId, ApprovalStatus approvalStatus) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked(uint8(approvalStatus)), _fieldLayout);
  }

  /**
   * @notice Set approvalStatus.
   */
  function _setApprovalStatus(bytes32 requestId, ApprovalStatus approvalStatus) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked(uint8(approvalStatus)), _fieldLayout);
  }

  /**
   * @notice Get description.
   */
  function getDescription(bytes32 requestId) internal view returns (string memory description) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /**
   * @notice Get description.
   */
  function _getDescription(bytes32 requestId) internal view returns (string memory description) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /**
   * @notice Set description.
   */
  function setDescription(bytes32 requestId, string memory description) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, bytes((description)));
  }

  /**
   * @notice Set description.
   */
  function _setDescription(bytes32 requestId, string memory description) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, bytes((description)));
  }

  /**
   * @notice Get the length of description.
   */
  function lengthDescription(bytes32 requestId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of description.
   */
  function _lengthDescription(bytes32 requestId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of description.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemDescription(bytes32 requestId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Get an item of description.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemDescription(bytes32 requestId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Push a slice to description.
   */
  function pushDescription(bytes32 requestId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Push a slice to description.
   */
  function _pushDescription(bytes32 requestId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Pop a slice from description.
   */
  function popDescription(bytes32 requestId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Pop a slice from description.
   */
  function _popDescription(bytes32 requestId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Update a slice of description at `_index`.
   */
  function updateDescription(bytes32 requestId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of description at `_index`.
   */
  function _updateDescription(bytes32 requestId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 requestId) internal view returns (RequestsDataTableData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 requestId) internal view returns (RequestsDataTableData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 requestId,
    uint32 approvalRate,
    uint32 denialRate,
    RequestStatus requestStatus,
    ApprovalStatus approvalStatus,
    string memory description
  ) internal {
    bytes memory _staticData = encodeStatic(approvalRate, denialRate, requestStatus, approvalStatus);

    EncodedLengths _encodedLengths = encodeLengths(description);
    bytes memory _dynamicData = encodeDynamic(description);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 requestId,
    uint32 approvalRate,
    uint32 denialRate,
    RequestStatus requestStatus,
    ApprovalStatus approvalStatus,
    string memory description
  ) internal {
    bytes memory _staticData = encodeStatic(approvalRate, denialRate, requestStatus, approvalStatus);

    EncodedLengths _encodedLengths = encodeLengths(description);
    bytes memory _dynamicData = encodeDynamic(description);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 requestId, RequestsDataTableData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.approvalRate,
      _table.denialRate,
      _table.requestStatus,
      _table.approvalStatus
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.description);
    bytes memory _dynamicData = encodeDynamic(_table.description);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 requestId, RequestsDataTableData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.approvalRate,
      _table.denialRate,
      _table.requestStatus,
      _table.approvalStatus
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.description);
    bytes memory _dynamicData = encodeDynamic(_table.description);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (uint32 approvalRate, uint32 denialRate, RequestStatus requestStatus, ApprovalStatus approvalStatus)
  {
    approvalRate = (uint32(Bytes.getBytes4(_blob, 0)));

    denialRate = (uint32(Bytes.getBytes4(_blob, 4)));

    requestStatus = RequestStatus(uint8(Bytes.getBytes1(_blob, 8)));

    approvalStatus = ApprovalStatus(uint8(Bytes.getBytes1(_blob, 9)));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  ) internal pure returns (string memory description) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    description = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (RequestsDataTableData memory _table) {
    (_table.approvalRate, _table.denialRate, _table.requestStatus, _table.approvalStatus) = decodeStatic(_staticData);

    (_table.description) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 requestId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 requestId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint32 approvalRate,
    uint32 denialRate,
    RequestStatus requestStatus,
    ApprovalStatus approvalStatus
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(approvalRate, denialRate, requestStatus, approvalStatus);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(string memory description) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(bytes(description).length);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(string memory description) internal pure returns (bytes memory) {
    return abi.encodePacked(bytes((description)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint32 approvalRate,
    uint32 denialRate,
    RequestStatus requestStatus,
    ApprovalStatus approvalStatus,
    string memory description
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(approvalRate, denialRate, requestStatus, approvalStatus);

    EncodedLengths _encodedLengths = encodeLengths(description);
    bytes memory _dynamicData = encodeDynamic(description);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 requestId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = requestId;

    return _keyTuple;
  }
}
