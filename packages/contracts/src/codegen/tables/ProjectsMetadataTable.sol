// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Hex below is the result of `WorldResourceIdLib.encode({ namespace: "csp", name: "ProjectsMetadata", typeId: RESOURCE_TABLE });`
ResourceId constant _tableId = ResourceId.wrap(0x7462637370000000000000000000000050726f6a656374734d65746164617461);
ResourceId constant ProjectsMetadataTableTableId = _tableId;

FieldLayout constant _fieldLayout = FieldLayout.wrap(
  0x005c050004202004140000000000000000000000000000000000000000000000
);

struct ProjectsMetadataTableData {
  uint32 timestamp;
  uint256 threshold;
  uint256 target;
  uint32 deadline;
  address manager;
}

library ProjectsMetadataTable {
  /**
   * @notice Get the table values' field layout.
   * @return _fieldLayout The field layout for the table.
   */
  function getFieldLayout() internal pure returns (FieldLayout) {
    return _fieldLayout;
  }

  /**
   * @notice Get the table's key schema.
   * @return _keySchema The key schema for the table.
   */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _keySchema = new SchemaType[](1);
    _keySchema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_keySchema);
  }

  /**
   * @notice Get the table's value schema.
   * @return _valueSchema The value schema for the table.
   */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _valueSchema = new SchemaType[](5);
    _valueSchema[0] = SchemaType.UINT32;
    _valueSchema[1] = SchemaType.UINT256;
    _valueSchema[2] = SchemaType.UINT256;
    _valueSchema[3] = SchemaType.UINT32;
    _valueSchema[4] = SchemaType.ADDRESS;

    return SchemaLib.encode(_valueSchema);
  }

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "projectId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](5);
    fieldNames[0] = "timestamp";
    fieldNames[1] = "threshold";
    fieldNames[2] = "target";
    fieldNames[3] = "deadline";
    fieldNames[4] = "manager";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get timestamp.
   */
  function getTimestamp(bytes32 projectId) internal view returns (uint32 timestamp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get timestamp.
   */
  function _getTimestamp(bytes32 projectId) internal view returns (uint32 timestamp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set timestamp.
   */
  function setTimestamp(bytes32 projectId, uint32 timestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((timestamp)), _fieldLayout);
  }

  /**
   * @notice Set timestamp.
   */
  function _setTimestamp(bytes32 projectId, uint32 timestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((timestamp)), _fieldLayout);
  }

  /**
   * @notice Get threshold.
   */
  function getThreshold(bytes32 projectId) internal view returns (uint256 threshold) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get threshold.
   */
  function _getThreshold(bytes32 projectId) internal view returns (uint256 threshold) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set threshold.
   */
  function setThreshold(bytes32 projectId, uint256 threshold) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((threshold)), _fieldLayout);
  }

  /**
   * @notice Set threshold.
   */
  function _setThreshold(bytes32 projectId, uint256 threshold) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((threshold)), _fieldLayout);
  }

  /**
   * @notice Get target.
   */
  function getTarget(bytes32 projectId) internal view returns (uint256 target) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get target.
   */
  function _getTarget(bytes32 projectId) internal view returns (uint256 target) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set target.
   */
  function setTarget(bytes32 projectId, uint256 target) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((target)), _fieldLayout);
  }

  /**
   * @notice Set target.
   */
  function _setTarget(bytes32 projectId, uint256 target) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((target)), _fieldLayout);
  }

  /**
   * @notice Get deadline.
   */
  function getDeadline(bytes32 projectId) internal view returns (uint32 deadline) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get deadline.
   */
  function _getDeadline(bytes32 projectId) internal view returns (uint32 deadline) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set deadline.
   */
  function setDeadline(bytes32 projectId, uint32 deadline) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((deadline)), _fieldLayout);
  }

  /**
   * @notice Set deadline.
   */
  function _setDeadline(bytes32 projectId, uint32 deadline) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((deadline)), _fieldLayout);
  }

  /**
   * @notice Get manager.
   */
  function getManager(bytes32 projectId) internal view returns (address manager) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get manager.
   */
  function _getManager(bytes32 projectId) internal view returns (address manager) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set manager.
   */
  function setManager(bytes32 projectId, address manager) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((manager)), _fieldLayout);
  }

  /**
   * @notice Set manager.
   */
  function _setManager(bytes32 projectId, address manager) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((manager)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 projectId) internal view returns (ProjectsMetadataTableData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 projectId) internal view returns (ProjectsMetadataTableData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 projectId,
    uint32 timestamp,
    uint256 threshold,
    uint256 target,
    uint32 deadline,
    address manager
  ) internal {
    bytes memory _staticData = encodeStatic(timestamp, threshold, target, deadline, manager);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 projectId,
    uint32 timestamp,
    uint256 threshold,
    uint256 target,
    uint32 deadline,
    address manager
  ) internal {
    bytes memory _staticData = encodeStatic(timestamp, threshold, target, deadline, manager);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 projectId, ProjectsMetadataTableData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.timestamp,
      _table.threshold,
      _table.target,
      _table.deadline,
      _table.manager
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 projectId, ProjectsMetadataTableData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.timestamp,
      _table.threshold,
      _table.target,
      _table.deadline,
      _table.manager
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (uint32 timestamp, uint256 threshold, uint256 target, uint32 deadline, address manager) {
    timestamp = (uint32(Bytes.slice4(_blob, 0)));

    threshold = (uint256(Bytes.slice32(_blob, 4)));

    target = (uint256(Bytes.slice32(_blob, 36)));

    deadline = (uint32(Bytes.slice4(_blob, 68)));

    manager = (address(Bytes.slice20(_blob, 72)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    PackedCounter,
    bytes memory
  ) internal pure returns (ProjectsMetadataTableData memory _table) {
    (_table.timestamp, _table.threshold, _table.target, _table.deadline, _table.manager) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 projectId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 projectId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint32 timestamp,
    uint256 threshold,
    uint256 target,
    uint32 deadline,
    address manager
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(timestamp, threshold, target, deadline, manager);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint32 timestamp,
    uint256 threshold,
    uint256 target,
    uint32 deadline,
    address manager
  ) internal pure returns (bytes memory, PackedCounter, bytes memory) {
    bytes memory _staticData = encodeStatic(timestamp, threshold, target, deadline, manager);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 projectId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = projectId;

    return _keyTuple;
  }
}
